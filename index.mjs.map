{"version":3,"file":"index.mjs","sources":["../lib/factory.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport unaryFactory from '@stdlib/random-strided-tools-unary-factory';\nimport base from '@stdlib/random-base-chisquare';\n\n\n// MAIN //\n\n/**\n* Returns a function for filling strided arrays containing pseudorandom numbers drawn from a chi-square distribution.\n*\n* @name factory\n* @type {Function}\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for filling strided arrays\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var chisquare = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* var arr = chisquare( out.length, [ 2.0 ], 0, out, 1 );\n* // returns <Float64Array>\n*\n* var bool = ( arr === out );\n* // returns true\n*/\nvar factory = unaryFactory( base );\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a chi-square distribution.\n*\n* @name chisquare\n* @type {Function}\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} k - degrees of freedom\n* @param {integer} sk - `k` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* chisquare( out.length, [ 2.0 ], 0, out, 1 );\n*/\nvar chisquare = factory();\n\n\n// EXPORTS //\n\nexport default chisquare;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from a chi-square distribution.\n*\n* @module @stdlib/random-strided-chisquare\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import chisquare from '@stdlib/random-strided-chisquare';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* chisquare( out.length, [ 2.0 ], 0, out, 1 );\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import chisquare from '@stdlib/random-strided-chisquare';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* chisquare.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"factory\": \"main.factory\", \"ndarray\": \"main.ndarray\" }\n"],"names":["factory","unaryFactory","base","chisquare","setReadOnly","main"],"mappings":";;8TA0DG,IAACA,EAAUC,EAAcC,GCVxBC,EAAYH,ICOhBI,EAAAC,EAAA,UAAAL"}